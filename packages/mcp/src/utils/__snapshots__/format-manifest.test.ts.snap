// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`formatComponentManifest > formats all full fixtures 1`] = `
"<component>
<id>button</id>
<name>Button</name>
<description>
A versatile button component that supports multiple variants, sizes, and states.

The Button component is a fundamental building block for user interactions. It can be styled as primary, secondary, or tertiary actions, and supports disabled and loading states.

## Usage

Buttons should be used for actions that affect the current page or trigger operations. For navigation, consider using a Link component instead.
</description>
<story>
<story_name>Primary</story_name>
<story_description>
The primary button variant is used for the main call-to-action on a page. It has the highest visual prominence and should be used sparingly to guide users toward the most important action.

## Best Practices

- Use only one primary button per section
- Keep button text concise and action-oriented
- Ensure sufficient contrast for accessibility
</story_description>
<story_code>
import { Button } from '@storybook/design-system';

const Primary = () => <Button variant="primary">Click Me</Button>
</story_code>
</story>
<story>
<story_name>Secondary</story_name>
<story_description>
The secondary button variant is used for secondary actions that are still important but not the primary focus of the page.

Secondary buttons have less visual weight than primary buttons and can be used multiple times on a page.
</story_description>
<story_code>
import { Button } from '@storybook/design-system';

const Secondary = () => <Button variant="secondary">Cancel</Button>
</story_code>
</story>
<story>
<story_name>With Sizes</story_name>
<story_description>
Buttons are available in three sizes: small, medium (default), and large.

Choose the appropriate size based on the context and hierarchy of actions. Larger buttons are more prominent and easier to tap on mobile devices.
</story_description>
<story_code>
import { Button } from '@storybook/design-system';

const WithSizes = () => (
  <>
    <Button size="small">Small</Button>
    <Button size="medium">Medium</Button>
    <Button size="large">Large</Button>
  </>
)
</story_code>
</story>
<story>
<story_name>Loading</story_name>
<story_description>
The loading state provides visual feedback when an async operation is in progress.

When loading is true, the button displays a spinner and is automatically disabled to prevent multiple submissions. The button text remains visible to maintain layout stability.
</story_description>
<story_code>
import { Button } from '@storybook/design-system';

const Loading = () => <Button loading onClick={() => console.log('clicked')}>Submit</Button>
</story_code>
</story>
<story>
<story_name>Danger</story_name>
<story_description>
The danger variant is used for destructive actions that cannot be easily undone, such as deleting data or canceling subscriptions.

Use this variant to draw attention to the serious nature of the action. Consider adding a confirmation dialog for critical operations.
</story_description>
<story_code>
import { Button } from '@storybook/design-system';

const Danger = () => <Button variant="danger" onClick={() => confirm('Are you sure?')}>Delete Account</Button>
</story_code>
</story>
<props>
<prop>
<prop_name>variant</prop_name>
<prop_description>
The visual style variant of the button
</prop_description>
<prop_type>"primary" | "secondary" | "tertiary" | "danger"</prop_type>
<prop_required>false</prop_required>
<prop_default>"primary"</prop_default>
</prop>
<prop>
<prop_name>size</prop_name>
<prop_description>
The size of the button
</prop_description>
<prop_type>"small" | "medium" | "large"</prop_type>
<prop_required>false</prop_required>
<prop_default>"medium"</prop_default>
</prop>
<prop>
<prop_name>disabled</prop_name>
<prop_description>
Whether the button is disabled
</prop_description>
<prop_type>boolean</prop_type>
<prop_required>false</prop_required>
<prop_default>false</prop_default>
</prop>
<prop>
<prop_name>loading</prop_name>
<prop_description>
Whether the button is in a loading state
</prop_description>
<prop_type>boolean</prop_type>
<prop_required>false</prop_required>
<prop_default>false</prop_default>
</prop>
<prop>
<prop_name>fullWidth</prop_name>
<prop_description>
Whether the button should take up the full width of its container
</prop_description>
<prop_type>boolean</prop_type>
<prop_required>false</prop_required>
<prop_default>false</prop_default>
</prop>
<prop>
<prop_name>onClick</prop_name>
<prop_description>
Callback function when the button is clicked
</prop_description>
<prop_type>(event: MouseEvent) => void</prop_type>
<prop_required>false</prop_required>
</prop>
<prop>
<prop_name>children</prop_name>
<prop_description>
The content of the button
</prop_description>
<prop_type>ReactNode</prop_type>
<prop_required>true</prop_required>
</prop>
</props>
</component>"
`;

exports[`formatComponentManifest > formats all full fixtures 2`] = `
"<component>
<id>card</id>
<name>Card</name>
<description>
A flexible container component for grouping related content with optional header, footer, and action areas.

The Card component provides a consistent way to present information in a contained, elevated surface. It's commonly used for displaying articles, products, user profiles, or any grouped content that benefits from visual separation.

## Design Principles

- Cards should contain a single subject or action
- Maintain consistent padding and spacing
- Use elevation to indicate interactive vs static cards
- Keep content hierarchy clear with proper use of typography
</description>
<story>
<story_name>Basic</story_name>
<story_description>
A basic card with just content.

The default elevated variant provides subtle depth through shadow, making the card appear to float above the page. This is ideal for creating visual hierarchy and grouping related information.
</story_description>
<story_code>
import { Card } from '@storybook/design-system';

const Basic = () => (
  <Card>
    <h3>Card Title</h3>
    <p>This is some card content that provides information to the user.</p>
  </Card>
)
</story_code>
</story>
<story>
<story_name>With Header And Footer</story_name>
<story_description>
A card with distinct header and footer sections.

Headers typically contain titles, subtitles, or avatars. Footers often contain actions like buttons or metadata like timestamps. The header and footer are visually separated from the main content area.
</story_description>
<story_code>
import { Card } from '@storybook/design-system';

const WithHeaderAndFooter = () => (
  <Card
    header={<h3>Article Title</h3>}
    footer={<Button variant="tertiary">Read More</Button>}
  >
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
  </Card>
)
</story_code>
</story>
<story>
<story_name>Clickable</story_name>
<story_description>
An interactive card that responds to clicks.

Clickable cards add hover effects and cursor changes to indicate interactivity. This pattern is useful for navigation cards, product cards, or any scenario where the entire card acts as a single interactive element.

## Accessibility

Clickable cards are rendered as buttons with proper keyboard support and ARIA attributes.
</story_description>
<story_code>
import { Card } from '@storybook/design-system';

const Clickable = () => (
  <Card clickable onClick={() => alert('Card clicked!')}>
    <h3>Product Name</h3>
    <p>Click anywhere on this card to view details.</p>
  </Card>
)
</story_code>
</story>
<story>
<story_name>Variants</story_name>
<story_description>
Different visual variants of the card component.

- **Elevated**: Default variant with shadow for depth
- **Outlined**: Border-only variant without shadow
- **Flat**: No border or shadow, minimal visual separation

Choose variants based on your design system and the level of emphasis needed.
</story_description>
<story_code>
import { Card } from '@storybook/design-system';

const Variants = () => (
  <>
    <Card variant="elevated">
      <p>Elevated card with shadow</p>
    </Card>
    <Card variant="outlined">
      <p>Outlined card with border</p>
    </Card>
    <Card variant="flat">
      <p>Flat card without border or shadow</p>
    </Card>
  </>
)
</story_code>
</story>
<story>
<story_name>User Profile</story_name>
<story_description>
A real-world example of a user profile card.

This example demonstrates how to compose the Card component with other design system components to create a complete, functional UI element. It includes an avatar, user information, stats, and action buttons.
</story_description>
<story_code>
import { Card, Avatar, Button } from '@storybook/design-system';

const UserProfile = () => (
  <Card
    header={
      <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
        <Avatar src="/user.jpg" alt="Jane Doe" />
        <div>
          <h3>Jane Doe</h3>
          <p>Senior Developer</p>
        </div>
      </div>
    }
    footer={
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <Button variant="primary" size="small">Follow</Button>
        <Button variant="secondary" size="small">Message</Button>
      </div>
    }
  >
    <div style={{ display: 'flex', justifyContent: 'space-around' }}>
      <div><strong>1.2K</strong><br/>Followers</div>
      <div><strong>342</strong><br/>Following</div>
      <div><strong>89</strong><br/>Posts</div>
    </div>
  </Card>
)
</story_code>
</story>
<props>
<prop>
<prop_name>variant</prop_name>
<prop_description>
The visual style variant of the card
</prop_description>
<prop_type>"elevated" | "outlined" | "flat"</prop_type>
<prop_required>false</prop_required>
<prop_default>"elevated"</prop_default>
</prop>
<prop>
<prop_name>padding</prop_name>
<prop_description>
The amount of internal padding
</prop_description>
<prop_type>"none" | "small" | "medium" | "large"</prop_type>
<prop_required>false</prop_required>
<prop_default>"medium"</prop_default>
</prop>
<prop>
<prop_name>clickable</prop_name>
<prop_description>
Whether the entire card is clickable/interactive
</prop_description>
<prop_type>boolean</prop_type>
<prop_required>false</prop_required>
<prop_default>false</prop_default>
</prop>
<prop>
<prop_name>header</prop_name>
<prop_description>
Content to display in the card header
</prop_description>
<prop_type>ReactNode</prop_type>
<prop_required>false</prop_required>
</prop>
<prop>
<prop_name>footer</prop_name>
<prop_description>
Content to display in the card footer
</prop_description>
<prop_type>ReactNode</prop_type>
<prop_required>false</prop_required>
</prop>
<prop>
<prop_name>children</prop_name>
<prop_description>
The main content of the card
</prop_description>
<prop_type>ReactNode</prop_type>
<prop_required>true</prop_required>
</prop>
<prop>
<prop_name>onClick</prop_name>
<prop_description>
Callback function when the card is clicked (requires clickable=true)
</prop_description>
<prop_type>(event: MouseEvent) => void</prop_type>
<prop_required>false</prop_required>
</prop>
</props>
</component>"
`;

exports[`formatComponentManifest > formats all full fixtures 3`] = `
"<component>
<id>input</id>
<name>Input</name>
<description>
A flexible text input component that supports various input types, validation states, and accessibility features.

The Input component is a foundational form element that wraps the native HTML input with consistent styling and behavior. It includes support for labels, error messages, helper text, and different visual states.

## Accessibility

The Input component automatically manages ARIA attributes for labels, descriptions, and error messages to ensure screen reader compatibility.
</description>
<story>
<story_name>Basic</story_name>
<story_description>
A basic text input with a label.

This is the most common use case for the Input component. Always include a label for accessibility, even if it's visually hidden in your design.
</story_description>
<story_code>
import { Input } from '@storybook/design-system';

const Basic = () => <Input label="Full Name" placeholder="Enter your name" />
</story_code>
</story>
<story>
<story_name>With Error</story_name>
<story_description>
An input displaying an error state with an error message.

Error messages should be clear, concise, and provide actionable guidance to help users fix the issue. The input border and message text are styled in red to indicate the error state.
</story_description>
<story_code>
import { Input } from '@storybook/design-system';

const WithError = () => <Input label="Email" type="email" value="invalid-email" error="Please enter a valid email address" />
</story_code>
</story>
<story>
<story_name>With Helper Text</story_name>
<story_description>
An input with helper text providing additional context or instructions.

Helper text appears below the input and provides guidance without being an error. Use it to clarify format expectations, character limits, or provide helpful hints.
</story_description>
<story_code>
import { Input } from '@storybook/design-system';

const WithHelperText = () => <Input label="Password" type="password" helperText="Must be at least 8 characters with one uppercase letter and one number" />
</story_code>
</story>
<story>
<story_name>Types</story_name>
<story_description>
Different input types for various data formats.

Using the correct input type improves the user experience by showing appropriate mobile keyboards and enabling browser validation features.
</story_description>
<story_code>
import { Input } from '@storybook/design-system';

const Types = () => (
  <>
    <Input label="Email" type="email" placeholder="user@example.com" />
    <Input label="Phone" type="tel" placeholder="(555) 123-4567" />
    <Input label="Website" type="url" placeholder="https://example.com" />
    <Input label="Age" type="number" placeholder="18" />
  </>
)
</story_code>
</story>
<story>
<story_name>Disabled</story_name>
<story_description>
A disabled input that cannot be interacted with.

Disabled inputs are useful for displaying non-editable data in forms or for inputs that become available only after certain conditions are met.
</story_description>
<story_code>
import { Input } from '@storybook/design-system';

const Disabled = () => <Input label="Username" value="john_doe" disabled />
</story_code>
</story>
<props>
<prop>
<prop_name>type</prop_name>
<prop_description>
The type of input field
</prop_description>
<prop_type>"text" | "email" | "password" | "number" | "tel" | "url"</prop_type>
<prop_required>false</prop_required>
<prop_default>"text"</prop_default>
</prop>
<prop>
<prop_name>label</prop_name>
<prop_description>
The label text for the input
</prop_description>
<prop_type>string</prop_type>
<prop_required>false</prop_required>
</prop>
<prop>
<prop_name>placeholder</prop_name>
<prop_description>
Placeholder text shown when the input is empty
</prop_description>
<prop_type>string</prop_type>
<prop_required>false</prop_required>
</prop>
<prop>
<prop_name>value</prop_name>
<prop_description>
The controlled value of the input
</prop_description>
<prop_type>string</prop_type>
<prop_required>false</prop_required>
</prop>
<prop>
<prop_name>defaultValue</prop_name>
<prop_description>
The initial value for an uncontrolled input
</prop_description>
<prop_type>string</prop_type>
<prop_required>false</prop_required>
</prop>
<prop>
<prop_name>disabled</prop_name>
<prop_description>
Whether the input is disabled
</prop_description>
<prop_type>boolean</prop_type>
<prop_required>false</prop_required>
<prop_default>false</prop_default>
</prop>
<prop>
<prop_name>required</prop_name>
<prop_description>
Whether the input is required
</prop_description>
<prop_type>boolean</prop_type>
<prop_required>false</prop_required>
<prop_default>false</prop_default>
</prop>
<prop>
<prop_name>error</prop_name>
<prop_description>
Error message to display below the input
</prop_description>
<prop_type>string</prop_type>
<prop_required>false</prop_required>
</prop>
<prop>
<prop_name>helperText</prop_name>
<prop_description>
Helper text to display below the input
</prop_description>
<prop_type>string</prop_type>
<prop_required>false</prop_required>
</prop>
<prop>
<prop_name>onChange</prop_name>
<prop_description>
Callback function when the input value changes
</prop_description>
<prop_type>(event: ChangeEvent<HTMLInputElement>) => void</prop_type>
<prop_required>false</prop_required>
</prop>
</props>
</component>"
`;

exports[`formatComponentManifestMapToList > formats the full manifest fixture 1`] = `
"<components>
<component>
<id>button</id>
<name>Button</name>
<summary>
A versatile button component for user interactions
</summary>
</component>
<component>
<id>card</id>
<name>Card</name>
<summary>
A flexible container component for grouping related content
</summary>
</component>
<component>
<id>input</id>
<name>Input</name>
<summary>
A flexible text input component with validation support
</summary>
</component>
</components>"
`;
